#include <iostream>
#include <fstream>
#include <boost/iterator/iterator_concepts.hpp>
#include "Struct_definition.h"
#include <opencv2/highgui/highgui.hpp>
#include <assert.h>

#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

#include "image.h"
#include<string.h>


using namespace cv;
using namespace std;

void LoadImages(const string &strPathLeft, const string &strPathRight, const string &strPathTimes,
                vector<string> &vstrImageLeft, vector<string> &vstrImageRight, vector<string> &vStrTimeStamp,vector<double> &vTimeStamps);



int  main()
{
  std::string configFile = "../config/ParamSetting.yml";
  std::string EurocCfg = "../config/EuRoC.yaml";
  std::string pathTime = "../config/MH01.txt";
  
  
  cv::FileStorage fs(configFile,cv::FileStorage::READ);
  std::string datasetBase;
  fs["datasetBase"]>>datasetBase;
  
  
  std::string LeftRectifyPath = datasetBase + "cam0_rectify/data";
  std::string RightRectifyPath = datasetBase + "cam1_rectify/data";


    // Retrieve paths to images
    vector<string> vstrImageLeft;
    vector<string> vstrImageRight;
    vector<double> vTimeStamp;
    vector<string> vStrTimeStamp;
    LoadImages(pathLeftImages,pathRightImages, pathTime, vstrImageLeft, vstrImageRight,vStrTimeStamp, vTimeStamp);

    if(vstrImageLeft.empty() || vstrImageRight.empty())
    {
        cerr << "ERROR: No images in provided path." << endl;
        return 1;
    }

    if(vstrImageLeft.size()!=vstrImageRight.size())
    {
        cerr << "ERROR: Different number of left and right images." << endl;
        return 1;
    }

    

    const int nImages = vstrImageLeft.size();

   
    cv::namedWindow("leftRectify");
    cv::namedWindow("rightRectify");
    
   
    // Main loop
    cv::Mat imLeft, imRight, imLeftRect, imRightRect;
    for(int ni=0; ni<nImages; ni++)
    {
        // Read left and right images from file
        imLeft = cv::imread(vstrImageLeft[ni],CV_LOAD_IMAGE_GRAYSCALE);
        imRight = cv::imread(vstrImageRight[ni],CV_LOAD_IMAGE_GRAYSCALE);

        if(imLeft.empty())
        {
            cerr << endl << "Failed to load image at: "
                 << string(vstrImageLeft[ni]) << endl;
            return 1;
        }

        if(imRight.empty())
        {
            cerr << endl << "Failed to load image at: "
                 << string(vstrImageRight[ni]) << endl;
            return 1;
        }

     
     
	cv::imshow("leftRectify",imLeftRect);
	cv::imshow("rightRectify",imRightRect);
	cv::waitKey(3);

    }

    
  
    return 0;
}

void LoadImagesPGM(const string &strPathLeft, const string &strPathRight, const string &strPathTimes,
                vector<string> &vstrImageLeft, vector<string> &vstrImageRight, vector<string> & vStrTimeStamp ,vector<double> &vTimeStamps)
{
    ifstream fTimes;
    fTimes.open(strPathTimes.c_str());
    vTimeStamps.reserve(5000);
    vstrImageLeft.reserve(5000);
    vstrImageRight.reserve(5000);
    while(!fTimes.eof())
    {
        string s;
        getline(fTimes,s);
        if(!s.empty())
        {
            stringstream ss;
            ss << s;
	    vStrTimeStamp.push_back(ss.str());
            vstrImageLeft.push_back(strPathLeft + "/" + ss.str() + ".pgm");
            vstrImageRight.push_back(strPathRight + "/" + ss.str() + ".pgm");
            double t;
            ss >> t;
            vTimeStamps.push_back(t/1e9);

        }
    }
}
